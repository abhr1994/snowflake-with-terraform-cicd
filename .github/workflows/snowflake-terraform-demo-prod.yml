name: "PRODUCTION ENV: Snowflake Terraform Demo Workflow"

on: 
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy-terraform-prod:
    name: "Deploy Terraform plan on Prod"
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Init
        id: init
        run: terraform -chdir=./prod init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=./prod validate -no-color
      
      - name: Terraform Import
        id: import
        run: terraform -chdir=./prod import module.snowflake_resources.snowflake_storage_integration.integration AR_AZURE_INT; terraform -chdir=./prod import module.snowflake_resources.snowflake_notification_integration.integration MY_NOTIFICATION_INTEGRATION
        
      - name: Terraform Plan on Prod for PR
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform -chdir=./prod plan -no-color -input=false
        continue-on-error: true
        env:
          TF_VAR_snowflake_private_key: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=./prod apply -auto-approve -input=false
        env:
          TF_VAR_snowflake_private_key: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}